package generate

import (
	"bufio"
	"errors"
	"github.com/dienggo/diego/pkg/file"
	"github.com/dienggo/diego/pkg/helper"
	"github.com/urfave/cli/v2"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"os"
	"strings"
)

type mockRepo struct{}

func (c mockRepo) Command() *cli.Command {
	return &cli.Command{
		Name:  "mock-repo",
		Usage: "Generate/make mock repository by existing repository",
		Action: func(context *cli.Context) error {
			if context.Args().Get(0) == "" {
				return errors.New(" repository name can not be empty")
			}
			return c.generate(helper.ReplaceSpecialCharacters(context.Args().Get(0), "_"))
		},
	}
}

func (c mockRepo) generate(repoName string) error {

	err, _ := helper.CheckFileExist("app/repositories/" + repoName + ".go")
	if err != nil {
		return errors.New(err.Error() + " - " + repoName)
	}
	repoNameMock := repoName + "_mock"
	// The name of the file to create.
	fileName := "app/repositories/" + repoNameMock + ".go"

	structName := cases.Title(language.English, cases.NoLower).String(strings.Replace(fileName, "app/repositories/", "", -1))

	structName = buildStructName(structName)

	err, methods := c.getMethodByInterface("app/repositories/" + repoName + ".go")
	if err != nil {
		return err
	}

	sMethods := ""
	sResultMethods := ""
	for _, method := range methods {
		onlyMethod := strings.Split(method, "(")[0]
		resultMethod := onlyMethod + "Result"
		sMethods += `
func (m ` + structName + `) ` + method + ` {
	return m.` + resultMethod + `()
}
`

		funcReplaced := strings.Replace(method, onlyMethod, "", -1)
		funcReplacedSplit := strings.Split(funcReplaced, ")")[1]
		funcReplacedSplit = strings.Replace(funcReplacedSplit, "(", "", -1)
		funcReplacedSplit = strings.Replace(funcReplacedSplit, ")", "", -1)
		funcReplacedSplit = strings.TrimSpace(funcReplacedSplit)

		if strings.Contains(funcReplacedSplit, ",") || strings.Contains(funcReplacedSplit, " ") {
			funcReplacedSplit = "(" + funcReplacedSplit + ")"
		}

		sResultMethods += `
	` + resultMethod + ` func() ` + funcReplacedSplit
	}

	// Write content to the file.
	content :=
		`package repositories

// ` + structName + ` is Auto generated by : diego make mock-repo ` + repoName + `
type ` + structName + ` struct{` + sResultMethods + `
}
` + sMethods + `
`
	err = file.Create(fileName, content)
	return err
}

func (c mockRepo) getMethodByInterface(path string) (err error, methods []string) {
	open, err := os.Open(path)
	if err != nil {
		return err, methods
	}
	defer func(open *os.File) {
		err := open.Close()
		if err != nil {
		}
	}(open)

	scanner := bufio.NewScanner(open)

	i := 0
	iSelectedInterface := 0
	stopFindContract := true
	for scanner.Scan() {
		text := scanner.Text()

		if i > iSelectedInterface {
			// get method contract from interface
			if strings.Contains(text, "}") {
				stopFindContract = true
			}

			// find method contract from interface
			if !stopFindContract {
				methods = append(methods, strings.TrimSpace(text))
			}

		}

		// get interface type
		if strings.Contains(text, "type ") && strings.Contains(text, " interface") && iSelectedInterface == 0 {
			iSelectedInterface = i
			stopFindContract = false
		}
		i++
	}
	return nil, methods
}
